version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: library-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-librarydb}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # API Integrator Service
  api_integrator:
    build:
      context: ./api_integrator
      dockerfile: Dockerfile
    container_name: library-api-integrator
    ports:
      - "${API_INTEGRATOR_PORT:-8080}:8080"
    environment:
      # Database Configuration
      DB_URL: jdbc:postgresql://postgres:5432/librarydb
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      
      # API Key Configuration - using dot notation to match Spring property naming
      api.key.header.name: X-API-KEY
      api.key.admin: admin-api-key-123
      api.key.books: books-api-key-456
      api.key.authors: authors-api-key-789
      api.key.borrowed-books: borrowed-books-api-key-101
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_FORMAT_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    volumes:
      - ./api_integrator/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library-network
    restart: unless-stopped

  # Main API Service
  main_api:
    build:
      context: ./main_api
      dockerfile: Dockerfile
    container_name: library-main-api
    ports:
      - "${MAIN_API_PORT:-8090}:8090"
    environment:
      # Server Configuration
      SERVER_PORT: ${MAIN_API_PORT:-8090}
      SPRING_PROFILES_ACTIVE: prod
      
      # API Integrator Configuration
      API_INTEGRATOR_BASE_URL: http://api_integrator:8080
      API_INTEGRATOR_TIMEOUT: 5000
      
      # API Key Configuration
      API_KEY_HEADER_NAME: X-API-KEY
      API_KEY_ADMIN: admin-api-key-123
      API_KEY_BOOKS: books-api-key-456
      API_KEY_AUTHORS: authors-api-key-789
      API_KEY_BORROWED_BOOKS: borrowed-books-api-key-101
      
      # Security Configuration - Allow frontend container and localhost
      ALLOWED_IPS: 127.0.0.1,::1,frontend,172.17.0.1
      FRONTEND_IP: frontend
    volumes:
      - ./main_api/logs:/app/logs
    depends_on:
      - api_integrator
    networks:
      - library-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: library-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8090/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - main_api
    networks:
      - library-network

volumes:
  postgres_data:

networks:
  library-network:
    driver: bridge 