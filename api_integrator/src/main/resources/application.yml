spring:
  application:
    name: library-management
  profiles:
    active: dev
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    show-sql: ${SPRING_JPA_SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: ${SPRING_JPA_FORMAT_SQL:true}
        dialect: org.hibernate.dialect.PostgreSQLDialect
        # Disable second-level cache
        cache:
          use_second_level_cache: false
          use_query_cache: false
  # Disable Spring Boot's cache auto-configuration
  cache:
    type: none
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/library_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  # Security configuration
  security:
    # Enable debug for detailed security logging
    debug: true
    # Force the use of our custom security configuration
    filter:
      dispatcher-types: REQUEST,ASYNC,ERROR,FORWARD,INCLUDE

  # H2 Database for development (comment out PostgreSQL above to use H2)
  #datasource:
  #  url: jdbc:h2:mem:testdb
  #  driver-class-name: org.h2.Driver
  #  username: sa
  #  password: password
  #h2:
  #  console:
  #    enabled: true

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /

# CORS configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: "*"

# Logging
logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    org.springframework.web: ${LOGGING_LEVEL_WEB:INFO}
    org.springframework.security: ${LOGGING_LEVEL_SECURITY:DEBUG}
    com.library: ${LOGGING_LEVEL_COM_LIBRARY:DEBUG}
    org.hibernate.SQL: ${LOGGING_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOGGING_LEVEL_SQL_PARAMS:TRACE}
    # Specific debug for security filters
    com.library.config.StrictApiKeyFilter: ${LOGGING_LEVEL_API_KEY_FILTER:DEBUG}
    com.library.config.WebSecurityConfig: ${LOGGING_LEVEL_SECURITY_CONFIG:DEBUG}
    com.library.config.ApiKeyAuthFilter: ${LOGGING_LEVEL_API_KEY_FILTER:DEBUG}
    org.springframework.security.web.FilterChainProxy: ${LOGGING_LEVEL_FILTER_CHAIN:DEBUG}

# SpringDoc OpenAPI
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
    version: openapi_3_0
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    docExpansion: none
    defaultModelsExpandDepth: -1
    defaultModelExpandDepth: 1
    displayRequestDuration: true
    showExtensions: true
    showCommonExtensions: true
    supportedSubmitMethods:
      - get
      - put
      - post
      - delete
      - options
      - head
      - patch
      - trace
    syntaxHighlight:
      activated: true
    requestSnippetsEnabled: true
    tryItOutEnabled: true
    filter: true
    persistAuthorization: true
  show-actuator: false
  packages-to-scan: com.library.controller
  paths-to-match: /books/**, /authors/**, /borrowed-books/**
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
    
# Pagination defaults
pagination:
  default-page-size: 10
  max-page-size: 100

# API Key Configuration
api:
  key:
    header:
      name: ${API_KEY_HEADER_NAME:X-API-KEY}
    admin: ${API_KEY_ADMIN:admin-api-key-123}
    books: ${API_KEY_BOOKS:books-api-key-456}
    authors: ${API_KEY_AUTHORS:authors-api-key-789}
    borrowed-books: ${API_KEY_BORROWED_BOOKS:borrowed-books-api-key-101}
    enabled: true 